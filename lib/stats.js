// Generated by CoffeeScript 1.4.0
(function() {
  var inspect, puts,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  inspect = require('util').inspect;

  puts = require('sys').puts;

  module.exports = (function() {

    function exports(root, model) {
      var k, v;
      this.root = root;
      this.update = __bind(this.update, this);

      this.end = __bind(this.end, this);

      this.measure = __bind(this.measure, this);

      this.begin = __bind(this.begin, this);

      this.getSnapshot = __bind(this.getSnapshot, this);

      this.toString = __bind(this.toString, this);

      this.pool_size = 0;
      this._ = {};
      for (k in model) {
        v = model[k];
        this._[k] = {
          func: v,
          values: {
            min: +Infinity,
            max: -Infinity,
            avg: 0
          }
        };
      }
    }

    exports.prototype.toString = function() {
      return inspect(this._, false, 20, true);
    };

    exports.prototype.getSnapshot = function() {
      return this._;
    };

    exports.prototype.begin = function() {
      var k, v, _ref, _results;
      this.pool_size = this.root.workers.length;
      _ref = this._;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        v.values.min = +Infinity;
        v.values.max = -Infinity;
        _results.push(v.values.avg = 0);
      }
      return _results;
    };

    exports.prototype.measure = function(worker) {
      var ab, k, sb, v, _ref, _results;
      _ref = this._;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        sb = v.values;
        ab = v.func(worker);
        sb.min = sb.min != null ? (ab < sb.min ? ab : sb.min) : ab;
        sb.max = sb.max != null ? (ab > sb.max ? ab : sb.max) : ab;
        sb.avg = sb.avg + ab;
        if (!isFinite(sb.avg)) {
          _results.push(sb.avg = 0);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    exports.prototype.end = function() {
      var k, v, _ref, _results;
      _ref = this._;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        v.values.avg = v.values.avg / this.pool_size;
        if (!isFinite(v.values.avg)) {
          _results.push(v.values.avg = 0);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    exports.prototype.update = function() {
      var worker, _i, _len, _ref;
      this.begin();
      _ref = this.root.workers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        worker = _ref[_i];
        this.measure(worker);
      }
      this.end();
      return this._;
    };

    return exports;

  })();

}).call(this);
