// Generated by CoffeeScript 1.4.0
(function() {
  var inspect, puts,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  inspect = require('util').inspect;

  puts = require('sys').puts;

  module.exports = (function() {

    function exports(root) {
      this.root = root;
      this.update = __bind(this.update, this);

      this.end = __bind(this.end, this);

      this.measure = __bind(this.measure, this);

      this.begin = __bind(this.begin, this);

      this.getSnapshot = __bind(this.getSnapshot, this);

      this.toString = __bind(this.toString, this);

      this._ = {
        pool_size: 0,
        balance: {
          min: void 0,
          max: void 0,
          avg: void 0
        }
      };
    }

    exports.prototype.toString = function() {
      return inspect(this._, false, 20, true);
    };

    exports.prototype.getSnapshot = function() {
      return this._;
    };

    exports.prototype.begin = function() {
      puts("updating stats..");
      this._.pool_size = this.root.workers.length;
      this._.balance.min = void 0;
      this._.balance.max = void 0;
      return this._.balance.avg = void 0;
    };

    exports.prototype.measure = function(worker) {
      var ab, sb;
      sb = this._.balance;
      ab = worker.balance;
      sb.min = sb.min != null ? (ab < sb.min ? ab : sb.min) : ab;
      return sb.max = sb.max != null ? (ab > sb.max ? ab : sb.max) : ab;
    };

    exports.prototype.end = function() {
      if (this._.pool_size) {
        this._.balance.avg / this._.pool_size;
      } else {
        0.0;

      }
      return puts("stats updated: " + (this.toString()));
    };

    exports.prototype.update = function() {
      var worker, _i, _len, _ref;
      this.begin();
      _ref = this.root.workers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        worker = _ref[_i];
        this.measure(worker);
      }
      return this.end();
    };

    return exports;

  })();

}).call(this);
