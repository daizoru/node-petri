// Generated by CoffeeScript 1.4.0
(function() {
  var Database, Master, broadcast, isFunction, makeId, pick, repeat, sha1, shuffle, timmy, wait, _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ref = require('ragtime'), repeat = _ref.repeat, wait = _ref.wait;

  timmy = require('timmy');

  _ref1 = require('../common'), isFunction = _ref1.isFunction, makeId = _ref1.makeId, sha1 = _ref1.sha1, shuffle = _ref1.shuffle, pick = _ref1.pick;

  Database = require('./database');

  broadcast = function(f) {
    var id, _i, _len, _ref2, _results;
    _ref2 = cluster.workers;
    _results = [];
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      id = _ref2[_i];
      _results.push(f(cluster.workers[id]));
    }
    return _results;
  };

  Master = (function() {

    function Master(options) {
      var _ref2, _ref3, _ref4;
      if (options == null) {
        options = {};
      }
      this.start = __bind(this.start, this);

      this.db_size = (_ref2 = options.db_size) != null ? _ref2 : 10;
      this.nb_cores = (_ref3 = options.nb_cores) != null ? _ref3 : 1;
      this.sampling_delay = (_ref4 = options.sampling_delay) != null ? _ref4 : 2..sec;
      this.restart_delay = 50..ms;
    }

    Master.prototype.start = function() {
      var db, db_size, nb_cores, restart_delay, runWorker, sampling_delay, sendGenome, _i, _results;
      restart_delay = this.restart_delay;
      sampling_delay = this.sampling_delay;
      nb_cores = this.nb_cores;
      db_size = this.db_size;
      db = new Database(db_size);
      sendGenome = function(worker) {
        var genome;
        genome = db.next();
        if (genome != null) {
          worker.genome = genome;
          return worker.send(JSON.stringify({
            genome: genome
          }));
        } else {
          return wait(restart_delay)(function() {
            return sendGenome(worker);
          });
        }
      };
      runWorker = function() {
        var worker;
        worker = cluster.fork();
        return worker.on('message', function(msg) {
          msg = JSON.parse(msg);
          if ('hello' in msg) {
            sendGenome(worker);
          }
          if ('record' in msg) {
            db.record(msg.record);
          }
          if ('die' in msg) {
            return db.remove(worker.genome);
          }
        });
      };
      cluster.on("exit", function(worker, code, signal) {
        return wait(restart_delay)(function() {
          return runWorker();
        });
      });
      (function() {
        _results = [];
        for (var _i = 0; 0 <= nb_cores ? _i <= nb_cores : _i >= nb_cores; 0 <= nb_cores ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this).map(function(i) {
        return runWorker();
      });
      repeat(sampling_delay, function() {
        var g;
        g = db.pick();
        if (!g) {
          return;
        }
        console.log("random individual:");
        console.log("  hash:     : " + g.hash);
        console.log("  generation: " + g.generation);
        console.log("   parent stats:");
        console.log("    forking   : " + g.stats.forking_rate);
        console.log("    mutation  : " + g.stats.mutation_rate);
        console.log("    lifespan  : " + g.stats.lifespan_rate + "\n");
        console.log(" general stats:");
        console.log("  db size: " + (db.size()));
        return console.log("  counter: " + db.counter);
      });
      return console.log("  oldest : " + (db.oldestGeneration()) + "\n");
    };

    return Master;

  })();

  module.exports = Master;

}).call(this);
