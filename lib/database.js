// Generated by CoffeeScript 1.4.0
(function() {
  var fs, inspect, isFunction, makeId, os, path, pick, read_file, sha1, shuffle, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  inspect = require("util").inspect;

  path = require("path");

  os = require("os");

  fs = require("fs");

  _ref = require('./common'), isFunction = _ref.isFunction, makeId = _ref.makeId, sha1 = _ref.sha1, shuffle = _ref.shuffle, pick = _ref.pick;

  read_file = function(f) {
    return fs.readFileSync(input, "utf8");
  };

  module.exports = (function() {

    function exports(max_size) {
      this.max_size = max_size != null ? max_size : 100;
      this.next = __bind(this.next, this);

      this.decimate = __bind(this.decimate, this);

      this.pick = __bind(this.pick, this);

      this.randomKeys = __bind(this.randomKeys, this);

      this.keys = __bind(this.keys, this);

      this.oldestGeneration = __bind(this.oldestGeneration, this);

      this.size = __bind(this.size, this);

      this.record = __bind(this.record, this);

      this.add = __bind(this.add, this);

      this.remove = __bind(this.remove, this);

      this._ = {};
      this.length = 0;
      this.counter = 0;
      this.batch = [];
    }

    exports.prototype.remove = function(g) {
      var id, _ref1;
      id = (_ref1 = g.id) != null ? _ref1 : Number(g);
      return delete this._[id];
    };

    exports.prototype.add = function(agent) {
      var dat, k, src, v, _ref1, _ref2;
      src = "";
      dat = (function() {
        var _results;
        _results = [];
        for (k in agent) {
          v = agent[k];
          if (k === 'main') {
            _results.push(dat[k] = src = v.toString());
          } else {
            _results.push(dat[k] = v);
          }
        }
        return _results;
      })();
      if ((_ref1 = dat.generation) == null) {
        dat.generation = 0;
      }
      dat.hash = sha1(src);
      if ((_ref2 = dat.id) == null) {
        dat.id = makeId();
      }
      return this.record(dat);
    };

    exports.prototype.record = function(g) {
      this._[g.id] = g;
      return this.counter++;
    };

    exports.prototype.size = function() {
      return this.keys().length;
    };

    exports.prototype.oldestGeneration = function() {
      var k, oldest, v, _ref1;
      oldest = 0;
      _ref1 = this._;
      for (k in _ref1) {
        v = _ref1[k];
        if (v.generation > oldest) {
          oldest = v.generation;
        }
      }
      return oldest;
    };

    exports.prototype.keys = function() {
      return Object.keys(this._);
    };

    exports.prototype.randomKeys = function() {
      return shuffle(this.keys());
    };

    exports.prototype.pick = function() {
      return this._[pick(this.keys())];
    };

    exports.prototype.decimate = function() {
      var k, size, to_remove, _i, _len, _ref1, _results;
      size = this.size();
      if (size < this.max_size) {
        return;
      }
      to_remove = size - this.max_size;
      _ref1 = this.randomKeys().slice(0, to_remove);
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        k = _ref1[_i];
        _results.push(delete this._[k]);
      }
      return _results;
    };

    exports.prototype.next = function() {
      var k;
      k = this.batch.pop();
      if (!(k != null) && this.size() > 0) {
        this.decimate();
        k = this.randomKeys().pop();
      }
      return this._[k];
    };

    return exports;

  })();

}).call(this);
