// Generated by CoffeeScript 1.4.0
(function() {
  var fs, inspect, isFunction, isString, makeId, os, path, pick, pretty, sha1, shuffle, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  inspect = require("util").inspect;

  path = require("path");

  os = require("os");

  fs = require("fs");

  _ref = require('./common'), isFunction = _ref.isFunction, isString = _ref.isString, makeId = _ref.makeId, sha1 = _ref.sha1, shuffle = _ref.shuffle, pick = _ref.pick, pretty = _ref.pretty;

  module.exports = (function() {

    function exports(max_size) {
      this.max_size = max_size != null ? max_size : 100;
      this.next = __bind(this.next, this);

      this.min = __bind(this.min, this);

      this.max = __bind(this.max, this);

      this.reduce = __bind(this.reduce, this);

      this.remove = __bind(this.remove, this);

      this.pick = __bind(this.pick, this);

      this.randomKeys = __bind(this.randomKeys, this);

      this.keys = __bind(this.keys, this);

      this.contains = __bind(this.contains, this);

      this.oldestGeneration = __bind(this.oldestGeneration, this);

      this.size = __bind(this.size, this);

      this.record = __bind(this.record, this);

      this.add = __bind(this.add, this);

      this.remove = __bind(this.remove, this);

      this._ = {};
      this.length = 0;
      this.batch = [];
    }

    exports.prototype.remove = function(g) {
      var id, _ref1;
      id = (_ref1 = g.id) != null ? _ref1 : Number(g);
      return delete this._[id];
    };

    exports.prototype.add = function(agent) {
      var generation, hash, id, src, _ref1, _ref2, _ref3;
      id = (_ref1 = agent.id) != null ? _ref1 : makeId();
      src = (_ref2 = agent.src) != null ? _ref2 : agent;
      generation = (_ref3 = agent.generation) != null ? _ref3 : 0;
      if (isFunction(src)) {
        src = src.toString();
      }
      hash = sha1(src);
      return this.record({
        id: id,
        src: src,
        hash: hash,
        generation: generation
      });
    };

    exports.prototype.record = function(g) {
      this._[g.id] = g;
      return this.length++;
    };

    exports.prototype.size = function() {
      return this.keys().length;
    };

    exports.prototype.oldestGeneration = function() {
      var k, oldest, v, _ref1;
      oldest = 0;
      _ref1 = this._;
      for (k in _ref1) {
        v = _ref1[k];
        if (v.generation > oldest) {
          oldest = v.generation;
        }
      }
      return oldest;
    };

    exports.prototype.contains = function(agent) {
      var hash, k, v, _ref1;
      if (g.id != null) {
        if (id in this._) {
          return true;
        }
      } else {
        hash = sha1(agent);
        _ref1 = this._;
        for (k in _ref1) {
          v = _ref1[k];
          if (g.hash === hash) {
            return true;
          }
        }
      }
      return false;
    };

    exports.prototype.keys = function() {
      return Object.keys(this._);
    };

    exports.prototype.randomKeys = function() {
      return shuffle(this.keys());
    };

    exports.prototype.pick = function() {
      return this._[pick(this.keys())];
    };

    exports.prototype.remove = function(matcher, onComplete) {
      var work,
        _this = this;
      work = function() {
        var dk, dv, k, r, v, _ref1;
        dk = void 0;
        dv = void 0;
        if (matcher.id != null) {
          dk = matcher.id;
        } else {
          if (isString(matcher)) {
            dk = matcher;
          } else {
            _ref1 = _this._;
            for (k in _ref1) {
              v = _ref1[k];
              if (matcher(k, v)) {
                dk = k;
                break;
              }
            }
          }
        }
        if (dk != null) {
          dv = _this._[dk];
          delete _this._[dk];
          _this.length--;
        }
        r = void 0;
        if (dk != null) {
          r = {};
          r[dk] = dv;
        }
        if (onComplete != null) {
          return onComplete(r);
        } else {
          return r;
        }
      };
      if (onComplete != null) {
        return process.nextTick(work);
      } else {
        return work();
      }
    };

    exports.prototype.reduce = function(reducer) {
      var a, item, k, keys, _i, _len, _results;
      keys = this.keys();
      a = 0;
      _results = [];
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        k = keys[_i];
        item = [k, this._[k]];
        _results.push(a = reducer(a, item));
      }
      return _results;
    };

    exports.prototype.max = function(f) {
      var k, max, obj, value, _ref1;
      max = -Infinity;
      _ref1 = this._;
      for (k in _ref1) {
        obj = _ref1[k];
        value = f(obj);
        if (value > max) {
          max = value;
        }
      }
      return max;
    };

    exports.prototype.min = function(f) {
      var k, min, obj, value, _ref1;
      min = Infinity;
      _ref1 = this._;
      for (k in _ref1) {
        obj = _ref1[k];
        value = f(obj);
        if (value < min) {
          min = value;
        }
      }
      return min;
    };

    exports.prototype.next = function() {
      if (this.batch.length === 0) {
        this.batch = Object.keys(this._);
      }
      return this._[this.batch.shift()];
    };

    return exports;

  })();

}).call(this);
