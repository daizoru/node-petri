// Generated by CoffeeScript 1.4.0
(function() {
  var fs, inspect, isFunction, isString, makeId, os, path, pick, pretty, sha1, shuffle, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  inspect = require("util").inspect;

  path = require("path");

  os = require("os");

  fs = require("fs");

  _ref = require('./common'), isFunction = _ref.isFunction, isString = _ref.isString, makeId = _ref.makeId, sha1 = _ref.sha1, shuffle = _ref.shuffle, pick = _ref.pick, pretty = _ref.pretty;

  module.exports = (function() {

    function exports(max_size) {
      this.max_size = max_size != null ? max_size : 100;
      this.next = __bind(this.next, this);

      this.agents = __bind(this.agents, this);

      this.each = __bind(this.each, this);

      this.min = __bind(this.min, this);

      this.max = __bind(this.max, this);

      this.reduce = __bind(this.reduce, this);

      this.remove = __bind(this.remove, this);

      this.add = __bind(this.add, this);

      this.contains = __bind(this.contains, this);

      this.record = __bind(this.record, this);

      this._ = {};
      this.length = 0;
      this.queue = [];
    }

    exports.prototype.record = function(g) {
      this._[g.id] = g;
      return this.length++;
    };

    exports.prototype.contains = function(agent) {
      var hash, k, v, _ref1;
      if (g.id != null) {
        if (id in this._) {
          return true;
        }
      } else {
        hash = sha1(agent);
        _ref1 = this._;
        for (k in _ref1) {
          v = _ref1[k];
          if (g.hash === hash) {
            return true;
          }
        }
      }
      return false;
    };

    exports.prototype.add = function(agent) {
      var generation, hash, id, src, _ref1, _ref2, _ref3;
      id = (_ref1 = agent.id) != null ? _ref1 : makeId();
      src = (_ref2 = agent.src) != null ? _ref2 : agent;
      generation = (_ref3 = agent.generation) != null ? _ref3 : 0;
      if (isFunction(src)) {
        src = src.toString();
      }
      hash = sha1(src);
      return this.record({
        id: id,
        src: src,
        hash: hash,
        generation: generation
      });
    };

    exports.prototype.remove = function(item, onComplete) {
      var work,
        _this = this;
      work = function() {
        var dv, id, k, r, v, _ref1;
        id = void 0;
        dv = void 0;
        if (item.id != null) {
          id = item.id;
        } else if (isString(item)) {
          id = item;
        } else if (isFinite(item)) {
          id = item.toString();
        }
        if (id == null) {
          _ref1 = _this._;
          for (k in _ref1) {
            v = _ref1[k];
            if (item(k, v)) {
              id = k;
              break;
            }
          }
        }
        if (id != null) {
          delete _this._[id];
          _this.length--;
        }
        r = void 0;
        if (id != null) {
          r = {};
          r[id] = dv;
        }
        if (onComplete != null) {
          return onComplete(r);
        } else {
          return r;
        }
      };
      if (onComplete != null) {
        return process.nextTick(work);
      } else {
        return work();
      }
    };

    exports.prototype.reduce = function(reducer) {
      var a, agent, id, item, _ref1;
      a = 0;
      _ref1 = this._;
      for (id in _ref1) {
        agent = _ref1[id];
        item = [id, agent];
        a = reducer(a, item);
      }
      return a;
    };

    exports.prototype.max = function(f) {
      var agent, id, max, value, _ref1;
      max = -Infinity;
      _ref1 = this._;
      for (id in _ref1) {
        agent = _ref1[id];
        value = f(agent);
        if (value == null) {
          continue;
        }
        if (value > max) {
          max = value;
        }
      }
      return max;
    };

    exports.prototype.min = function(f) {
      var agent, id, min, value, _ref1;
      min = Infinity;
      _ref1 = this._;
      for (id in _ref1) {
        agent = _ref1[id];
        value = f(agent);
        if (value == null) {
          continue;
        }
        if (value < min) {
          min = value;
        }
      }
      return min;
    };

    exports.prototype.each = function(f) {
      var agent, id, _ref1;
      _ref1 = this._;
      for (id in _ref1) {
        agent = _ref1[id];
        f(agent);
      }
      return this;
    };

    exports.prototype.agents = function(cmp) {
      var agent, id, tmp, _ref1;
      tmp = [];
      _ref1 = this._;
      for (id in _ref1) {
        agent = _ref1[id];
        tmp.push(agent);
      }
      tmp.sort(cmp != null ? cmp : function(a, b) {
        return b.generation - a.generation;
      });
      return tmp;
    };

    exports.prototype.next = function() {
      var item, keys;
      keys = Object.keys(this._);
      item = this._[pick(keys)];
      return item;
      /*
          @_[id] if id of @_
      
          # update the queue
          queue = for id in @queue
            if id? and id of @_
              id
          @queue = queue
      
          if @queue.length is 0
            @queue = Object.keys @_
            if @queue.length is 0
              console.log "ok, here the queue is really empty.. returning undefined"
              return undefined
      
          nextId = @queue.shift()
          unless nextId
            throw new Error "nextId is null"
      
          nextAgent = @_[nextId]
        
          unless nextAgent?
            throw new Error "next agent is null.. wtf"
          
          nextAgent
      */

    };

    return exports;

  })();

}).call(this);
