// Generated by CoffeeScript 1.4.0
(function() {
  var P, Stats, cluster, common, debug, inspect, isFunction, pretty, wait,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  inspect = require('util').inspect;

  cluster = require('cluster');

  wait = require('ragtime').wait;

  Stats = require('./stats');

  common = require('./common');

  P = common.P, isFunction = common.isFunction;

  debug = function(msg) {
    if (true) {
      return console.log("" + msg);
    }
  };

  pretty = function(obj) {
    return "" + (inspect(obj, false, 20, true));
  };

  module.exports = (function() {

    function exports(options) {
      var agent, data, k, stats, v, _agents, _ref, _ref1;
      if (options == null) {
        options = {};
      }
      this.decimate = __bind(this.decimate, this);

      this.start = __bind(this.start, this);

      this.environment = options.environment;
      this.frequency = (_ref = options.frequency) != null ? _ref : 1000;
      stats = (_ref1 = options.stats) != null ? _ref1 : {
        energy: function(agent) {
          return agent.energy;
        }
      };
      this.agents = [];
      if (options.agents != null) {
        _agents = options.agents;
        if (isFunction(_agents)) {
          _agents = _agents();
        }
        this.agents = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = _agents.length; _i < _len; _i++) {
            agent = _agents[_i];
            data = {
              update: function() {}
            };
            for (k in agent) {
              v = agent[k];
              if (k === 'update') {
                data.update = isFunction(v) ? v : eval(v);
              } else {
                data[k] = v;
              }
            }
            _results.push(data);
          }
          return _results;
        })();
      }
      this.stats = new Stats(this, stats);
    }

    exports.prototype.start = function() {
      var environment, frequency, iterations, sync, _,
        _this = this;
      frequency = this.frequency;
      environment = this.environment;
      sync = function(f) {
        return wait(_this.frequency)(function() {
          _this.stats.update();
          return f();
        });
      };
      iterations = 0;
      return (_ = function() {
        return sync(function() {
          var agent, inputs, outputs;
          iterations += 1;
          debug("iteration #" + iterations + ": " + _this.agents.length + " agents remaining");
          _this.agents = (function() {
            var _i, _len, _ref, _results;
            _ref = this.agents;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              agent = _ref[_i];
              debug("preparing input data");
              inputs = environment.input({}, agent);
              debug("running update function on inputs: " + pretty(inputs));
              outputs = {};
              try {
                outputs = agent.update(inputs);
              } catch (e1) {
                debug("killing agent (bad update function: " + e1 + ")");
                continue;
              }
              try {
                environment.output(this.stats, {}, agent, outputs);
              } catch (e2) {
                debug("killing agent (bad output: " + e2 + ")");
                continue;
              }
              _results.push(agent);
            }
            return _results;
          }).call(_this);
          return _();
        });
      })();
    };

    exports.prototype.decimate = function() {
      return debug("stats: " + (inspect(this.stats)));
    };

    return exports;

  })();

}).call(this);
