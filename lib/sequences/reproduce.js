// Generated by CoffeeScript 1.6.3
(function() {
  var P, cluster, deck, inspect, makeId, map, mutable, mutate, pick, sha1, timmy, wait, _ref, _ref1, _ref2;

  cluster = require('cluster');

  inspect = require('util').inspect;

  deck = require('deck');

  _ref = require('ragtime'), map = _ref.map, wait = _ref.wait;

  _ref1 = require('evolve'), mutable = _ref1.mutable, mutate = _ref1.mutate;

  timmy = require('timmy');

  _ref2 = require('../common'), P = _ref2.P, makeId = _ref2.makeId, sha1 = _ref2.sha1, pick = _ref2.pick;

  (function() {
    console.log("sending hello world");
    outputs({
      hello: 'world'
    });
    return inputs(function(msg) {
      var err, foo, forking_rate, genome, lifespan_rate, mutation_rate;
      console.log("master sent us " + (inspect(msg)));
      genome = msg.genome;
      if (genome != null) {
        mutation_rate = 0.05;
        forking_rate = 0.60;
        lifespan_rate = 0.01;
        foo = 0.25;
        eval(genome.src);
        compute();
        mutation_rate = Math.abs(mutation_rate);
        lifespan_rate = Math.abs(lifespan_rate);
        forking_rate = Math.abs(forking_rate);
        if (genome.generation > 0 && Math.random() < lifespan_rate) {
          outputs({
            die: "end of tree"
          });
        }
        if (Math.random() < forking_rate) {
          return evolve.clone({
            ratio: mutation_rate,
            src: genome.src,
            onComplete: function(new_src) {
              outputs({
                record: {
                  src: new_src,
                  generation: genome.generation + 1,
                  id: makeId(),
                  hash: sha1(new_src),
                  stats: {
                    mutation_rate: mutation_rate,
                    lifespan_rate: lifespan_rate,
                    forking_rate: forking_rate
                  }
                }
              });
              return process.exit(0);
            }
          });
        } else {
          return process.exit(0);
        }
      } else {
        err = "error, unknow message: " + (inspect(msg));
        console.log(err);
        return process.exit(1);
      }
    });
  });

}).call(this);
