// Generated by CoffeeScript 1.4.0
(function() {
  var NB_CORES, P, copy, crypto, deck, inspect, isArray, isBoolean, isFunction, isNumber, isString, isUndefined, makeId, os, pick, pretty, randInt, readFile, sha1, shuffle, toStr;

  inspect = require('util').inspect;

  crypto = require('crypto');

  os = require('os');

  deck = require('deck');

  makeId = exports.makeId = function() {
    return Number("" + (new Date().valueOf()) + (Math.round(Math.random() * 10000)));
  };

  copy = exports.copy = function(a) {
    return JSON.parse(JSON.stringify(a));
  };

  P = exports.P = function(p) {
    if (p == null) {
      p = 0.5;
    }
    return +(Math.random() < p);
  };

  isFunction = exports.isFunction = function(obj) {
    return !!(obj && obj.constructor && obj.call && obj.apply);
  };

  isUndefined = exports.isUndefined = function(obj) {
    return typeof obj === 'undefined';
  };

  isArray = exports.isArray = function(obj) {
    return Array.isArray(obj);
  };

  isString = exports.isString = function(obj) {
    return !!(obj === '' || (obj && obj.charCodeAt && obj.substr));
  };

  isNumber = exports.isNumber = function(obj) {
    return (obj === +obj) || toString.call(obj) === '[object Number]';
  };

  isBoolean = exports.isBoolean = function(obj) {
    return obj === true || obj === false;
  };

  isString = exports.isString = function(obj) {
    return !!(obj === '' || (obj && obj.charCodeAt && obj.substr));
  };

  toStr = exports.toStr = function(func) {
    return func.toString();
  };

  randInt = exports.randInt = function(min, max) {
    if (isUndefined(max)) {
      return Math.round(Math.random() * min);
    } else {
      return Math.round(min + (Math.random() * (max - min)));
    }
  };

  sha1 = exports.sha1 = function(src) {
    var shasum;
    shasum = crypto.createHash('sha1');
    shasum.update(src);
    return shasum.digest('hex');
  };

  NB_CORES = exports.NB_CORES = (function() {
    var cpus;
    cpus = Math.round(os.cpus().length);
    if (cpus < 3) {
      return 1;
    } else {
      return cpus - 2;
    }
  })();

  pick = exports.pick = deck.pick;

  shuffle = exports.shuffle = deck.shuffle;

  pretty = exports.pretty = function(obj) {
    return "" + (inspect(obj, false, 20, true));
  };

  readFile = exports.readFile = function(f) {
    return fs.readFileSync(input, "utf8");
  };

}).call(this);
