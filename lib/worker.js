// Generated by CoffeeScript 1.6.3
(function() {
  var P, cluster, colors, every, isString, log, makeId, npm, pick, pretty, sha1, _ref;

  cluster = require('cluster');

  colors = require('colors');

  npm = require('npm');

  _ref = require('./common'), P = _ref.P, makeId = _ref.makeId, sha1 = _ref.sha1, pick = _ref.pick, every = _ref.every, pretty = _ref.pretty, log = _ref.log, isString = _ref.isString;

  module.exports = function() {
    var agent, emit, onEvent, spawned;
    agent = {
      sha: '',
      name: '',
      listeners: {}
    };
    emit = function(msg) {
      return process.send(JSON.stringify(msg));
    };
    onEvent = function(signalKey, cb) {
      var _ref1;
      return listeners[signalKey] = ((_ref1 = listeners[signalKey]) != null ? _ref1 : []).push(cb);
    };
    spawned = false;
    return npm.load(npm.config, function(npmErr) {
      if (npmErr != null) {
        throw err;
      }
      npm.on("log", function(message) {
        return emit({
          cmd: 'debug',
          msg: message
        });
      });
      process.on('message', function(raw) {
        var download, k, listener, match, msg, run, v, _i, _len, _ref1, _ref2, _ref3, _results;
        msg = JSON.parse(raw);
        switch (msg.cmd) {
          case 'die':
            emit({
              cmd: 'warn',
              msg: 'master asked me to die'
            });
            return process.exit(-1);
          case 'spawn':
            _ref1 = msg.agent;
            for (k in _ref1) {
              v = _ref1[k];
              if (k === 'listeners') {
                continue;
              }
              agent[k] = v;
            }
            if (!agent.src) {
              emit({
                cms: 'failure',
                msg: "no src found in params passed ot the spawn()"
              });
              process.exit(-1);
            }
            every(3..sec(function() {
              return emit({
                cmd: 'ping'
              });
            }));
            run = function(program, params) {
              var context;
              if (isString(program)) {
                agent.src = program;
              } else {
                agent.src = program.toString();
              }
              context = {
                emit: emit,
                src: agent.src,
                logger: {
                  failure: function(msg) {
                    return emit({
                      cmd: 'failure',
                      msg: msg.toString()
                    });
                  },
                  warn: function(msg) {
                    return emit({
                      cmd: 'warn',
                      msg: msg.toString()
                    });
                  },
                  success: function(msg) {
                    return emit({
                      cmd: 'success',
                      msg: msg.toString()
                    });
                  },
                  info: function(msg) {
                    return emit({
                      cmd: 'info',
                      msg: msg.toString()
                    });
                  },
                  debug: function(msg) {
                    return emit({
                      cmd: 'debug',
                      msg: msg.toString()
                    });
                  }
                }
              };
              if (isString(program)) {
                eval("var Agent = " + src + ";");
                console.log("running " + (pretty(agent.name)));
                return Agent.apply(context, [params]);
              } else {
                console.log("running " + (pretty(agent.name)));
                return program.apply(context, [params]);
              }
            };
            download = function(moduleName, cb, lastError) {
              var error, loaded, match, missingModule;
              if (lastError == null) {
                lastError = void 0;
              }
              log("downloading " + moduleName);
              try {
                loaded = require("" + moduleName);
                log("seems like requiring " + moduleName + " worked. Cool.");
                return cb(void 0);
              } catch (_error) {
                error = _error;
                log("got error " + error);
                if (error === lastError) {
                  cb(error);
                  return;
                }
                log("checking if this is a dependency problem..");
                match = /Cannot find module '([a-zA-Z0-9_\-\.]+)'/i.exec(error.message);
                if (error.code === 'MODULE_NOT_FOUND') {
                  missingModule = match[1];
                  log("yes it is.. installing " + missingModule + " using NPM..");
                  cb(1);
                  return;
                  return npm.commands.install([missingModule], function(npmError, data) {
                    if (npmError != null) {
                      log("npm install failed: " + pretty(npmError));
                      return cb(npmError);
                    } else {
                      log("npm install succeeded");
                      return download(moduleName, cb, error);
                    }
                  });
                } else {
                  log("not a dependency issue: " + pretty(error));
                  return cb(error, void 0);
                }
              }
            };
            match = /[a-zA-Z0-9\-_]+/i.exec(agent.src);
            if (match != null) {
              log("requiring module " + match[0]);
              return download(match[0], function(err) {
                var loaded;
                if (err != null) {
                  throw err;
                }
                log("loading the module");
                loaded = require(match[0]);
                return run(loaded, msg.params);
              });
            } else {
              log("loading directly the source code");
              return run(agent.src, msg.params);
            }
            break;
          default:
            _ref3 = (_ref2 = agent.listeners[msg.cmd]) != null ? _ref2 : [];
            _results = [];
            for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
              listener = _ref3[_i];
              _results.push(listener());
            }
            return _results;
        }
      });
      return emit({
        cmd: 'ready'
      });
    });
  };

}).call(this);
