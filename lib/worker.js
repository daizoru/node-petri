// Generated by CoffeeScript 1.4.0
(function() {
  var P, cluster, colors, deck, inspect, makeId, map, mutable, mutate, pick, pretty, repeat, sha1, timmy, wait, _ref, _ref1, _ref2;

  cluster = require('cluster');

  inspect = require('util').inspect;

  colors = require('colors');

  deck = require('deck');

  _ref = require('ragtime'), map = _ref.map, wait = _ref.wait, repeat = _ref.repeat;

  _ref1 = require('evolve'), mutable = _ref1.mutable, mutate = _ref1.mutate;

  timmy = require('timmy');

  _ref2 = require('./common'), P = _ref2.P, makeId = _ref2.makeId, sha1 = _ref2.sha1, pick = _ref2.pick, pretty = _ref2.pretty;

  module.exports = function() {
    var emit;
    emit = function(msg) {
      return process.send(JSON.stringify(msg));
    };
    process.on('message', function(msg) {
      var agentMeta, agentName, config, context, localLog, logLevel, preserveGeneration, _ref3, _ref4;
      agentMeta = JSON.parse(msg);
      agentName = agentMeta.name;
      config = agentMeta.config;
      logLevel = (_ref3 = config.logLevel) != null ? _ref3 : 0;
      preserveGeneration = (_ref4 = config.preserveGeneration) != null ? _ref4 : 0;
      localLog = function(msg) {
        return console.log(" " + agentName + ": " + msg);
      };
      context = {
        source: agentMeta.src,
        energy: 100,
        emit: function(msg) {
          var k, level, logmsg, packet, v, _ref5, _ref6, _ref7;
          if (msg.log != null) {
            level = (_ref5 = msg.log.level) != null ? _ref5 : 0;
            logmsg = (_ref6 = msg.log.msg) != null ? _ref6 : '';
            if (logLevel <= level) {
              localLog("" + logmsg);
            }
          }
          if (msg.die != null) {
            localLog("sending die".red);
            if (agentMeta.generation > preserveGeneration) {
              localLog("sending die....");
              emit({
                die: "die"
              });
            }
          }
          if (msg.fork != null) {
            localLog("sending fork".yellow);
            packet = {
              id: makeId(),
              generation: agentMeta.generation + 1,
              hash: sha1(msg.fork.src),
              src: msg.fork.src
            };
            _ref7 = msg.fork;
            for (k in _ref7) {
              v = _ref7[k];
              if (k === 'src') {
                continue;
              }
              packet[k] = v;
            }
            return emit({
              fork: packet
            });
          } else {
            return emit(msg);
          }
        }
      };
      context.transfert = function(amount) {
        if ((amount < 0) && (amount > context.energy)) {
          return false;
        }
        context.energy += amount;
        return true;
      };
      context.logger = {
        failure: function(msg) {
          return context.emit({
            log: {
              level: 0,
              msg: ("" + msg).red
            }
          });
        },
        alert: function(msg) {
          return context.emit({
            log: {
              level: 1,
              msg: ("" + msg).yellow
            }
          });
        },
        success: function(msg) {
          return context.emit({
            log: {
              level: 2,
              msg: ("" + msg).green
            }
          });
        },
        info: function(msg) {
          return context.emit({
            log: {
              level: 2,
              msg: "" + msg
            }
          });
        },
        debug: function(msg) {
          return context.emit({
            log: {
              level: 3,
              msg: ("" + msg).grey
            }
          });
        }
      };
      eval("var Agent = " + agentMeta.src + ";");
      localLog("spawned agent " + (pretty(agentMeta.name)) + ", gen " + (pretty(agentMeta.generation)));
      Agent.apply(context, [config]);
      return repeat(5000, function() {
        return emit({
          'heartbeat': 'heartbeat'
        });
      });
    });
    emit({
      'ready': 0
    });
    return {
      'on': function(key) {}
    };
  };

}).call(this);
