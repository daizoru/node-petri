// Generated by CoffeeScript 1.6.3
(function() {
  var P, cluster, colors, every, log, makeId, pick, pretty, sha1, _ref;

  cluster = require('cluster');

  colors = require('colors');

  _ref = require('./common'), P = _ref.P, makeId = _ref.makeId, sha1 = _ref.sha1, pick = _ref.pick, every = _ref.every, pretty = _ref.pretty, log = _ref.log;

  module.exports = function() {
    var agent, emit, onEvent, spawned;
    agent = {
      sha: '',
      name: '',
      listeners: {}
    };
    emit = function(msg) {
      return process.send(JSON.stringify(msg));
    };
    onEvent = function(signalKey, cb) {
      var _ref1;
      return listeners[signalKey] = ((_ref1 = listeners[signalKey]) != null ? _ref1 : []).push(cb);
    };
    spawned = false;
    process.on('message', function(raw) {
      var context, err, k, listener, loaded, msg, v, _i, _len, _ref1, _ref2, _ref3, _results;
      msg = JSON.parse(raw);
      switch (msg.cmd) {
        case 'die':
          emit({
            cmd: 'warn',
            msg: 'master asked me to die'
          });
          return process.exit(-1);
        case 'spawn':
          _ref1 = msg.agent;
          for (k in _ref1) {
            v = _ref1[k];
            if (k === 'listeners') {
              continue;
            }
            agent[k] = v;
          }
          if (!agent.src) {
            emit({
              cms: 'failure',
              msg: "no src found in params passed ot the spawn()"
            });
            process.exit(-1);
          }
          try {
            loaded = require(agent.src);
            if (loaded) {
              agent.src = loaded.toString();
            } else {
              log("loaded a module, but it is empty");
            }
          } catch (_error) {
            err = _error;
            log("this is not a module");
          }
          context = {
            emit: emit,
            src: agent.src,
            logger: {
              failure: function(msg) {
                return emit({
                  cmd: 'failure',
                  msg: msg.toString()
                });
              },
              warn: function(msg) {
                return emit({
                  cmd: 'warn',
                  msg: msg.toString()
                });
              },
              success: function(msg) {
                return emit({
                  cmd: 'success',
                  msg: msg.toString()
                });
              },
              info: function(msg) {
                return emit({
                  cmd: 'info',
                  msg: msg.toString()
                });
              },
              debug: function(msg) {
                return emit({
                  cmd: 'debug',
                  msg: msg.toString()
                });
              }
            }
          };
          every(3..sec(function() {
            return emit({
              cmd: 'ping'
            });
          }));
          eval("var Agent = " + agent.src + ";");
          console.log("spawned " + (pretty(agent.name)));
          return Agent.apply(context, [msg.params]);
        default:
          _ref3 = (_ref2 = agent.listeners[msg.cmd]) != null ? _ref2 : [];
          _results = [];
          for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
            listener = _ref3[_i];
            _results.push(listener());
          }
          return _results;
      }
    });
    return emit({
      cmd: 'ready'
    });
  };

}).call(this);
