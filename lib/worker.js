// Generated by CoffeeScript 1.4.0
(function() {
  var P, agent, cluster, colors, deck, inspect, makeId, map, mutable, mutate, pick, pretty, repeat, sha1, timmy, wait, _ref, _ref1, _ref2;

  cluster = require('cluster');

  inspect = require('util').inspect;

  colors = require('colors');

  deck = require('deck');

  _ref = require('ragtime'), map = _ref.map, wait = _ref.wait, repeat = _ref.repeat;

  _ref1 = require('evolve'), mutable = _ref1.mutable, mutate = _ref1.mutate;

  timmy = require('timmy');

  _ref2 = require('./common'), P = _ref2.P, makeId = _ref2.makeId, sha1 = _ref2.sha1, pick = _ref2.pick, pretty = _ref2.pretty;

  agent = void 0;

  module.exports = function() {
    var send;
    send = function(msg) {
      return process.send(JSON.stringify(msg));
    };
    process.on('message', function(msg) {
      var agentMeta, agentName, config, log, logLevel, master, _ref3;
      agentMeta = JSON.parse(msg);
      agentName = agentMeta.name;
      config = agentMeta.config;
      logLevel = (_ref3 = config.logLevel) != null ? _ref3 : 0;
      log = function(msg) {
        return console.log("    Agent " + agentName + ": " + msg);
      };
      master = {
        send: function(msg) {
          var level, logmsg, src, _ref4, _ref5;
          if ('log' in msg) {
            level = (_ref4 = msg.log.level) != null ? _ref4 : 0;
            logmsg = (_ref5 = msg.log.msg) != null ? _ref5 : '';
            if (logLevel <= level) {
              log("" + logmsg);
            }
          } else if ('die' in msg) {
            log("DIE".red);
          }
          if (agentMeta.generation > 0) {
            return send({
              die: "end of tree"
            });
          } else if ('fork' in msg) {
            src = msg.fork;
            log("Forking agent..".yellow);
            return send({
              'fork': {
                id: makeId(),
                generation: agentMeta.generation + 1,
                hash: sha1(src),
                src: src
              }
            });
          } else {
            return send(msg);
          }
        }
      };
      master.logger = {
        failure: function(msg) {
          return master.send({
            log: {
              level: 0,
              msg: ("" + msg).red
            }
          });
        },
        alert: function(msg) {
          return master.send({
            log: {
              level: 1,
              msg: ("" + msg).yellow
            }
          });
        },
        success: function(msg) {
          return master.send({
            log: {
              level: 2,
              msg: ("" + msg).green
            }
          });
        },
        info: function(msg) {
          return master.send({
            log: {
              level: 2,
              msg: "" + msg
            }
          });
        },
        debug: function(msg) {
          return master.send({
            log: {
              level: 3,
              msg: ("" + msg).grey
            }
          });
        }
      };
      eval("var Agent = " + agentMeta.src + ";");
      Agent(master, agentMeta.src, config);
      return repeat(5000, function() {
        return send({
          'heartbeat': 'heartbeat'
        });
      });
    });
    send({
      'ready': 0
    });
    return {
      'on': function(key) {}
    };
  };

}).call(this);
