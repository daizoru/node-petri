// Generated by CoffeeScript 1.4.0
(function() {
  var P, agent, cluster, deck, inspect, makeId, map, mutable, mutate, pick, pretty, sha1, timmy, wait, _ref, _ref1, _ref2,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  cluster = require('cluster');

  inspect = require('util').inspect;

  deck = require('deck');

  _ref = require('ragtime'), map = _ref.map, wait = _ref.wait;

  _ref1 = require('evolve'), mutable = _ref1.mutable, mutate = _ref1.mutate;

  timmy = require('timmy');

  _ref2 = require('./common'), P = _ref2.P, makeId = _ref2.makeId, sha1 = _ref2.sha1, pick = _ref2.pick, pretty = _ref2.pretty;

  agent = void 0;

  module.exports = function(options) {
    var agentConfigurator, logLevel, send, _ref3;
    if (options == null) {
      options = {};
    }
    agentConfigurator = options.config;
    logLevel = (_ref3 = options.logLevel) != null ? _ref3 : 0;
    console.log("WORKER STARTED");
    send = function(msg) {
      return process.send(JSON.stringify(msg));
    };
    process.on('message', function(msg) {
      var agentMeta, config, master;
      agentMeta = JSON.parse(msg);
      console.log("WORKER RECEIVED AGENT FROM MASTER: " + (pretty(agentMeta)));
      master = {
        send: function(msg) {
          var level, src, _ref4, _ref5;
          console.log("EMIT");
          if (__indexOf.call(msg, 'log') >= 0) {
            level = (_ref4 = msg.log.level) != null ? _ref4 : 0;
            msg = (_ref5 = msg.log.msg) != null ? _ref5 : '';
            if (logLevel <= level) {
              console.log("" + msg);
            }
          }
          if (__indexOf.call(msg, 'die') >= 0) {
            console.log("AGENT DIE:");
            if (agentMeta.generation > 0) {
              send({
                die: "end of tree"
              });
            }
          }
          if (__indexOf.call(msg, 'fork') >= 0) {
            src = msg.fork;
            console.log("AGENT FORK");
            return send({
              'fork': {
                id: makeId(),
                generation: agentMeta.generation + 1,
                hash: sha1(src),
                src: src
              }
            });
          }
        }
      };
      master.logger = {
        alert: function(msg) {
          return master.send({
            log: {
              level: 0,
              msg: "ALERT " + msg
            }
          });
        },
        info: function(msg) {
          return master.send({
            log: {
              level: 1,
              msg: "INFO " + msg
            }
          });
        },
        debug: function(msg) {
          return master.send({
            log: {
              level: 2,
              msg: "DEBUG " + msg
            }
          });
        }
      };
      config = agentConfigurator(agentMeta);
      console.log("agent config: " + (inspect(config, false, 20, true)));
      console.log("evaluating agent");
      eval("var Agent = " + agentMeta.src + ";");
      console.log("created Agent: " + (pretty(Agent)));
      return Agent(master, config);
    });
    return send({
      'ready': 0
    });
  };

}).call(this);
