// Generated by CoffeeScript 1.4.0
(function() {
  var P, cluster, deck, inspect, makeId, map, mutable, mutate, pick, sha1, timmy, wait, _ref, _ref1, _ref2,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  cluster = require('cluster');

  inspect = require('util').inspect;

  deck = require('deck');

  _ref = require('ragtime'), map = _ref.map, wait = _ref.wait;

  _ref1 = require('evolve'), mutable = _ref1.mutable, mutate = _ref1.mutate;

  timmy = require('timmy');

  _ref2 = require('../common'), P = _ref2.P, makeId = _ref2.makeId, sha1 = _ref2.sha1, pick = _ref2.pick;

  module.exports = function(options) {
    var Environment, agentConfigurator, logLevel, send, _ref3;
    if (options == null) {
      options = {};
    }
    Environment = options.environment;
    agentConfigurator = options.config;
    logLevel = (_ref3 = options.logLevel) != null ? _ref3 : 0;
    console.log("WORKER STARTED");
    send = function(msg) {
      return process.send(JSON.stringify(msg));
    };
    return process.on('message', function(msg) {
      var Agent, agent, agentMeta, config, emit, onMsg;
      console.log("WORKER RECEIVED AGENT FROM MASTER: " + msg);
      agentMeta = JSON.parse(msg);
      onMsg = function(msg) {
        throw new Error("Not Implemented");
      };
      emit = function(msg) {
        var level, src, _ref4, _ref5;
        console.log("EMIT");
        if (__indexOf.call(msg, 'log') >= 0) {
          level = (_ref4 = msg.log.level) != null ? _ref4 : 0;
          msg = (_ref5 = msg.log.msg) != null ? _ref5 : '';
          if (logLevel <= level) {
            console.log("" + msg);
          }
        }
        if (__indexOf.call(msg, 'die') >= 0) {
          console.log("AGENT DIE:");
          if (agentMeta.generation > 0) {
            send({
              die: "end of tree"
            });
          }
        }
        if (__indexOf.call(msg, 'fork') >= 0) {
          src = msg.fork;
          console.log("AGENT FORK");
          return send({
            'fork': {
              id: makeId(),
              generation: agentMeta.generation + 1,
              hash: sha1(src),
              src: src
            }
          });
        }
      };
      config = agentConfigurator(agentMeta);
      console.log("agent config: " + (inspect(config, false, 20, true)));
      console.log("evaluating agent");
      Agent = eval(agentMeta.src);
      return agent = new Agent(onMsg, emit, agentMeta.options);
    });
  };

}).call(this);
