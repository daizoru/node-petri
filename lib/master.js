// Generated by CoffeeScript 1.4.0
(function() {
  var Database, P, Stats, cluster, debug, inspect, isFunction, makeId, pretty, repeat, timmy, wait, _ref, _ref1;

  inspect = require('util').inspect;

  cluster = require('cluster');

  _ref = require('ragtime'), repeat = _ref.repeat, wait = _ref.wait;

  timmy = require('timmy');

  Database = require('./database');

  Stats = require('./stats');

  _ref1 = require('./common'), P = _ref1.P, isFunction = _ref1.isFunction, makeId = _ref1.makeId;

  debug = function(msg) {
    if (true) {
      return console.log("" + msg);
    }
  };

  pretty = function(obj) {
    return "" + (inspect(obj, false, 20, true));
  };

  module.exports = function(options) {
    var agent, agents, database, databaseSize, debugInterval, decimationTrigger, environment, frequency, i, restart_delay, spawn, workersByMachine, _i, _len, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
    if (options == null) {
      options = {};
    }
    console.log("master started");
    environment = options.environment;
    workersByMachine = (_ref2 = options.workersByMachine) != null ? _ref2 : common.NB_CORES;
    decimationTrigger = (_ref3 = options.decimationTrigger) != null ? _ref3 : 10;
    frequency = (_ref4 = options.frequency) != null ? _ref4 : 1000;
    databaseSize = (_ref5 = options.databaseSize) != null ? _ref5 : 10;
    debugInterval = (_ref6 = options.debugInterval) != null ? _ref6 : 2..sec;
    restart_delay = 500..ms;
    database = new Database(databaseSize);
    agents = (_ref7 = options.agents) != null ? _ref7 : [];
    for (_i = 0, _len = agents.length; _i < _len; _i++) {
      agent = agents[_i];
      database.add(agent);
    }
    spawn = function() {
      var worker;
      console.log("spawn");
      worker = cluster.fork();
      worker.on('online', function() {
        var _j, _len1, _ref8;
        agent = database.next();
        if (agent != null) {
          console.log("sending agent");
          worker.agent = agent;
          return worker.send(JSON.stringify(agent));
        } else {
          console.log("error, no agent to send. system will shutdown.");
          _ref8 = cluster.workers;
          for (_j = 0, _len1 = _ref8.length; _j < _len1; _j++) {
            worker = _ref8[_j];
            worker.destroy();
          }
          return process.exit(0);
        }
      });
      return worker.on('message', function(msg) {
        console.log("worker replied: " + msg);
        msg = JSON.parse(msg);
        if ('fork' in msg) {
          database.record(msg.fork);
        }
        if ('die' in msg) {
          database.remove(worker.agent);
          return console.log("worker died: " + msg.die);
        }
      });
    };
    cluster.on("exit", function(worker, code, signal) {
      console.log("worker exited: " + code);
      return wait(restart_delay)(function() {
        return spawn();
      });
    });
    i = 0;
    while (i++ < workersByMachine) {
      spawn();
    }
    repeat(debugInterval, function() {
      var g, genome;
      g = genome = database.pick();
      if (!g) {
        return;
      }
      console.log("random individual:");
      console.log("  hash:     : " + g.hash);
      console.log("  generation: " + g.generation);
      console.log("   parent stats:");
      console.log("    forking   : " + g.stats.forking_rate);
      console.log("    mutation  : " + g.stats.mutation_rate);
      console.log("    lifespan  : " + g.stats.lifespan_rate + "\n");
      console.log(" general stats:");
      console.log("  db size: " + (database.size()));
      return console.log("  counter: " + database.counter);
    });
    return console.log("  oldest : " + (database.oldestGeneration()) + "\n");
  };

  module.exports = Master;

}).call(this);
